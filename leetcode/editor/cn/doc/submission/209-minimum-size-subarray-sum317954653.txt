class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
      // 暴力求解法
//      int result = INT32_MAX; //最终结果
//      int sum = 0; // 子序列的数值之和
//      int subLength = 0;//子序列的长度
//      for(int i = 0; i < nums.size();i++){ //设置子序列起点为i
//        sum = 0;
//        for(int j = i; j<nums.size();j++){ //设置子序列终止位置为j
//          sum+=nums[j];
//          if(sum >= target){ // 一旦发现子序列和超过s
//            subLength = j-i+1;
//            result = result < subLength ? result : subLength;
//            break;
//          }
//        }
//
//      }
//      return result == INT32_MAX?0:result;

      // 双指针
      int result = INT32_MAX;
      int sum = 0;
      int i = 0;
      int subLength = 0;
      for(int j = 0; j < nums.size();j++){
        sum += nums[j];
        //注意这里使用while，每次更新 i（起始位置），并不断比较子序列是否符合条件
        while(sum >= target){
          subLength = (j-i+1);
          result  = result < subLength ? result:subLength;
          sum -= nums[i++]; // 这里体现出滑动窗口的精髓之处，不断变更i（子序列的起始位置）
        }
      }
      return result == INT32_MAX ? 0 : result;

    }
};

//runtime:8 ms
//memory:10.4 MB
